                       --TITLE--

     "virtual environments"

                 ----Table of Contents (TOC)----

venv is a Python module that provides support for creating lightweight "virtual environments" with their own Python interpreters, libraries, and scripts. These virtual environments allow you to isolate project dependencies and avoid conflicts between different Python projects.
A.Notes
B.Why Use venv
C.Installation


                ----Notes----

A.Isolation: Virtual environments created with venv are isolated from the system-wide Python environment and other virtual environments. This isolation helps in managing dependencies and package versions specific to each project.
Dependency Management: By using venv, you can install project-specific dependencies without affecting the global Python environment or other projects.
B.Compatibility: venv works well with pip, Python's package installer, allowing seamless installation and management of packages within the virtual environment.
Lightweight: Virtual environments created with venv are lightweight and easy to create and manage compared to other tools like virtualenv.

                ----Why Use pytest----

Project Isolation: Each project can have its own isolated environment, ensuring that dependencies and package versions are consistent and do not conflict with other projects.
Dependency Control: You can easily install, upgrade, and remove packages within the virtual environment without affecting the rest of your system.
Portability: Virtual environments created with venv can be easily shared and reproduced across different systems, ensuring consistent development environments.
Security: Using virtual environments can reduce security risks by isolating project-specific libraries and scripts from the system-wide Python environment.

                 ----Installation----

venv is included as a standard module in Python 3.3 and later versions. You can create a virtual environment using the venv module without needing to install anything extra.

To create a virtual environment, navigate to your project directory and run:

(bash)
python -m venv myenv
Replace myenv with the name you want to give to your virtual environment. This command will create a directory named myenv (or whatever name you chose) containing the virtual environment files.

To activate the virtual environment on different operating systems:

Windows:

(bash)
myenv\Scripts\activate
Unix or MacOS:

(bash)
source myenv/bin/activate
Once activated, your shell prompt will change to show the name of the virtual environment, indicating that you are now working within that environment.





